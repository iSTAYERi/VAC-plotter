# -*- coding: utf-8 -*-

from scipy.optimize import curve_fit
import numpy as np
import matplotlib.pyplot as plt


class ExpPlot:

    def _exp_fun(x, a, b):
        return -a * (np.exp(-b*x)-1)

    def _get_exp_fit(U, I):
        guess = [1, 0.03]
        params, cov = curve_fit(ExpPlot._exp_fun, U, I, p0=guess)
        return params

    def fit_and_get_coeff_a(xData, yData):
        xData = np.array(xData)
        yData = np.array(yData)
        popt = ExpPlot._get_exp_fit(xData, yData)
        return popt[0]


if __name__ == "__main__":

    xData = [-4.9999999475286, -4.89795818223898, -4.79591630394406,
             -4.69387453865444, -4.59183277336483, -4.4897908950699,
             -4.38774901677497, -4.28570725148536, -4.18366537319043,
             -4.0816234948955, -3.97958172960588, -3.87753985131095,
             -3.77549797301603, -3.67345620772641, -3.5714144424368,
             -3.46937245113655, -3.36733068584694, -3.26528880755201,
             -3.1632470422624, -3.06120505096215, -2.95916328567254,
             -2.85712152038292, -2.75507952908268, -2.65303787679838,
             -2.55099599850345, -2.44895412020852, -2.3469122419136,
             -2.24487036361867, -2.14282859832905, -2.04078683303944,
             -1.93874495474451, -1.83670307644958, -1.73466131115997,
             -1.63261943286504, -1.53057755457011, -1.42853578928049,
             -1.32649391098557, -1.22445214569595, -1.12241026740102,
             -1.02036838910609, -0.91832662381648, -0.81628474552155,
             -0.71424286722662, -0.61220098893169, -0.51015922364208,
             -0.40811734534715, -0.30607558005754, -0.20403370176261,
             -0.10199182346768, 0]

    yData = [-0.00155973758030929, -0.00154669583224918,
             -0.0015389209439825699, -0.00152863802724286,
             -0.00151735189911392, -0.00150706898237421, -0.00149703686848181,
             -0.00148499833181092, -0.0014732105979873601,
             -0.0014616736670111101, -0.0014488827217983, -0.00143709498797474,
             -0.0014258088598458, -0.00141301791463298, -0.00139897295518362,
             -0.00138467719288695, -0.00137665150177304, -0.00135708887968287,
             -0.00134404713162274, -0.001330503777868, -0.0013121951700143899,
             -0.0013001566333435, -0.00128711488528339, -0.00127181591159749,
             -0.0012547613179804001, -0.0012369543158213998,
             -0.0012234109620666601, -0.0012043499456711, -0.00119055578906905,
             -0.00117099316697887, -0.00115067813634677, -0.00113086471140928,
             -0.00111305770925029, -0.00108973304445046, -0.00107468487361186,
             -0.00105336663159052, -0.0010252767126918, -0.0010049616820597001,
             -0.0009836434400383569, -0.000961823592322379,
             -0.0009415085616902749, -0.000917933094043135,
             -0.0008870843438240151, -0.000872537778680037,
             -0.0008446986626286449, -0.0008158563351879969,
             -0.000790525247609694, -0.000757920877459392,
             -0.000718043224737111, -0.00034409617939798297]

    # xData = list(map(lambda x: float("{:.3f}".format(x)), xData))
    # yData = list(map(lambda x: float("{:.3f}".format(x)), yData))
    xData = np.array(xData)
    yData = np.array(yData)

    popt = ExpPlot._get_exp_fit(xData, yData)
#    poptR = ExpPlot.getExpFitR(xData, yData)
    print(popt)

    trialX = np.linspace(xData[0], xData[-1], 1000)
    Iv = ExpPlot._exp_fun(trialX, *popt)
#    IvR = ExpPlot.expFunR(trialX, *poptR)

#    plt.figure()
#    plt.plot(xData, yData, 'b*')
    plt. figure()
    plt.plot(trialX, Iv, 'r-')
    plt.plot(xData, yData, 'b*')
#    plt.plot(trialX, IvR, 'g--')
#    plt. figure()
#    plt.plot(trialX, Iv, 'r-')
    plt.show()
